import { ThemeProvider as OriginalThemeProvider, withTheme, } from '@emotion/react';
import React, { useState } from 'react';
import { ThemeType, colors, dark, light } from './index';
import createCtx from './createCtx';
import useColorScheme from './useColorScheme';
import { useMediaQuery } from 'react-responsive';
const [useCtx, Provider] = createCtx();
function ThemeProvider({ children, initialThemeType, customTheme, }) {
    const isMobile = useMediaQuery({ maxWidth: 767 });
    const isTablet = useMediaQuery({ minWidth: 767, maxWidth: 992 });
    const isDesktop = useMediaQuery({ minWidth: 992 });
    const colorScheme = useColorScheme();
    const [themeType, setThemeType] = useState(initialThemeType ||
        (colorScheme === 'light' ? ThemeType.LIGHT : ThemeType.DARK));
    const changeThemeType = () => {
        const newThemeType = themeType === ThemeType.LIGHT ? ThemeType.DARK : ThemeType.LIGHT;
        setThemeType(newThemeType);
    };
    const defaultTheme = themeType === ThemeType.DARK
        ? { ...dark, ...customTheme?.dark }
        : { ...light, ...customTheme?.light };
    const media = {
        isMobile,
        isTablet,
        isDesktop,
    };
    const theme = { ...defaultTheme, ...media };
    return (<Provider value={{
            media,
            themeType,
            changeThemeType,
            theme: defaultTheme,
            colors,
        }}>
      <OriginalThemeProvider theme={theme}>{children}</OriginalThemeProvider>
    </Provider>);
}
export { useCtx as useTheme, ThemeProvider, ThemeType, withTheme };
