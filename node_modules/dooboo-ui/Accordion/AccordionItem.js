import { Animated, Easing } from 'react-native';
import React, { useEffect, useRef, useState } from 'react';
import styled from '@emotion/native';
const TitleContainer = styled.TouchableOpacity `
  justify-content: center;
  background-color: #141414;
  height: 50px;
  z-index: 10;
`;
const ItemContainer = styled.View `
  flex-direction: row;
  align-items: center;
  width: 100%;
  padding: 20px 40px;
`;
const StyledTitle = styled.Text `
  font-weight: bold;
  color: #ffffff;
  position: absolute;
  left: 20px;
`;
const StyledItem = styled.Text `
  font-weight: bold;
`;
let layoutHeight = 0;
const AccordionItem = (props) => {
    const { testID, datum: item, shouldAnimate, collapseOnStart, animDuration, activeOpacity, toggleElement, dropDownAnimValueList, sumOfPrecedingTranslateY, renderTitle, renderBody, titleContainerStyle, bodyContainerStyle, } = props;
    const rotateAnimValue = useRef(new Animated.Value(0)).current;
    const [opened, setAnimState] = useState(collapseOnStart);
    const [bodyMounted, setBodyMounted] = useState(false);
    const [bodyHeight, setBodyHeight] = useState(0);
    const handleBodyLayout = (e) => {
        if (bodyMounted)
            return;
        const { height } = e.nativeEvent.layout;
        layoutHeight = height;
        setBodyMounted(true);
        setBodyHeight(height);
    };
    const handleAnimState = () => {
        setAnimState(!opened);
    };
    const renderDefaultTitle = (title) => {
        return <StyledTitle>{title}</StyledTitle>;
    };
    const renderDefaultBody = (body) => {
        return <StyledItem>{body}</StyledItem>;
    };
    const renderIndicator = (
    // eslint-disable-next-line @typescript-eslint/no-shadow
    toggleElement) => {
        return (<Animated.View style={{
                position: 'absolute',
                right: 20,
                transform: [
                    {
                        rotate: rotateAnimValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: ['0deg', '180deg'],
                        }),
                    },
                ],
            }}>
        {toggleElement || null}
      </Animated.View>);
    };
    useEffect(() => {
        if (bodyMounted)
            dropDownAnimValueList.setValue(opened ? -layoutHeight : 0);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [bodyMounted]);
    useEffect(() => {
        if (shouldAnimate) {
            if (!opened) {
                Animated.timing(dropDownAnimValueList, {
                    toValue: 0,
                    duration: animDuration || 300,
                    useNativeDriver: true,
                }).start();
                return;
            }
            Animated.timing(dropDownAnimValueList, {
                toValue: -bodyHeight,
                duration: animDuration || 300,
                useNativeDriver: true,
            }).start();
        }
        else {
            const targetValue = opened ? -bodyHeight : 0;
            dropDownAnimValueList.setValue(targetValue);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [opened]);
    useEffect(() => {
        const targetValue = opened ? 0 : 1;
        if (shouldAnimate)
            Animated.timing(rotateAnimValue, {
                toValue: targetValue,
                duration: 200,
                easing: Easing.linear,
                useNativeDriver: true,
            }).start();
        else
            rotateAnimValue.setValue(targetValue);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [opened]);
    return (<Animated.View style={[
            {
                backgroundColor: 'transparent',
                overflow: 'hidden',
                width: 300,
                transform: sumOfPrecedingTranslateY,
            },
        ]}>
      <TitleContainer testID={`title_${testID}`} onPress={handleAnimState} activeOpacity={activeOpacity} style={titleContainerStyle}>
        {renderTitle ? renderTitle(item.title) : renderDefaultTitle(item.title)}
        {renderIndicator(toggleElement)}
      </TitleContainer>

      <Animated.View testID={`body_${testID}`} style={{
            height: !bodyMounted ? undefined : bodyHeight,
            transform: [
                {
                    translateY: dropDownAnimValueList,
                },
            ],
        }} onLayout={handleBodyLayout}>
        {item.bodies.map((body, key) => {
            return (<ItemContainer key={key} style={bodyContainerStyle}>
              {renderBody ? renderBody(body) : renderDefaultBody(body)}
            </ItemContainer>);
        })}
      </Animated.View>
    </Animated.View>);
};
export default AccordionItem;
