import { Platform, } from 'react-native';
import React, { useEffect, useState } from 'react';
import styled, { css } from '@emotion/native';
const Container = styled.View `
  height: 40px;
  width: 381px;
  margin-left: 20px;
  margin-right: 20px;
  border-radius: 6px;
  border-width: 1px;
  border-color: #e0e0e0;
  flex-direction: row;
  align-items: center;
`;
const Input = styled.TextInput `
  flex-grow: 1;
  align-self: center;
  font-size: 14px;
  padding-left: 16px;
`;
// reference : https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci
function useDebounce(value, delay) {
    const [debouncedValue, setDebouncedValue] = useState(value);
    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedValue(value);
        }, delay);
        return () => {
            clearTimeout(handler);
        };
    }, [delay, value]);
    return debouncedValue;
}
const SearchInput = (props) => {
    const { value, containerStyle, inputStyle, focusColor = '#109CF1', debounceDelay = 400, leftElement, placeholder, placeholderTextColor = '#BDBDBD', onFocus, rightElement, onBlur, onDebounceOrOnReset, onKeyPress, } = props;
    const [focused, setFocus] = useState(false);
    const [inputValue, setInputValue] = useState(value);
    const debouncedValue = useDebounce(inputValue, debounceDelay);
    useEffect(() => {
        if (onDebounceOrOnReset)
            onDebounceOrOnReset(debouncedValue);
    }, [debouncedValue, onDebounceOrOnReset]);
    useEffect(() => {
        setInputValue(value);
    }, [value]);
    return (<Container testID={'SEARCH_CONTAINER'} style={[containerStyle, focused && { borderColor: focusColor }]}>
      {leftElement || null}
      <Input testID={'SEARCH_INPUT'} value={inputValue} style={[
            inputStyle,
            Platform.OS === 'web' &&
                css `
              outline-style: none;
            `,
        ]} onChangeText={(text) => {
            setInputValue(text);
        }} placeholder={placeholder} placeholderTextColor={placeholderTextColor} onFocus={() => {
            setFocus(true);
            onFocus && onFocus();
        }} onBlur={() => {
            setFocus(false);
            onBlur && onBlur();
        }} onKeyPress={onKeyPress}/>
      {rightElement || null}
    </Container>);
};
export { SearchInput };
