import React from 'react';
import type { StyleProp, TextInputProps, TextStyle, ViewStyle } from 'react-native';
import { DoobooTheme } from './theme';
declare type Styles = {
    container?: StyleProp<ViewStyle>;
    hovered?: StyleProp<ViewStyle>;
    labelText?: StyleProp<TextStyle>;
    labelTextHovered?: StyleProp<TextStyle>;
    input?: StyleProp<TextStyle>;
    errorText?: StyleProp<TextStyle>;
};
export declare type EditTextProps = {
    testID?: TextInputProps['testID'];
    theme?: DoobooTheme;
    textInputProps?: TextInputProps;
    style?: StyleProp<ViewStyle>;
    styles?: Styles;
    labelText?: string;
    errorText?: string;
    value?: TextInputProps['value'];
    onChange?: TextInputProps['onChange'];
    onChangeText?: TextInputProps['onChangeText'];
    placeholder?: TextInputProps['placeholder'];
    placeholderTextColor?: TextInputProps['placeholderTextColor'];
    onFocus?: TextInputProps['onFocus'] | undefined;
    onBlur?: TextInputProps['onBlur'] | undefined;
    editable?: TextInputProps['editable'];
    autoCapitalize?: TextInputProps['autoCapitalize'];
    secureTextEntry?: TextInputProps['secureTextEntry'];
    onSubmitEditing?: TextInputProps['onSubmitEditing'];
    focusColor?: string;
    hoverColor?: string;
    errorColor?: string;
    disableColor?: string;
    labelColor?: string;
    type?: 'row' | 'column';
};
export declare const EditText: React.FC<Pick<EditTextProps & {
    theme: DoobooTheme;
} & {
    children?: React.ReactNode;
}, "value" | "children" | "placeholder" | "style" | "type" | "testID" | "styles" | "onBlur" | "onFocus" | "onChange" | "onChangeText" | "placeholderTextColor" | "editable" | "autoCapitalize" | "secureTextEntry" | "onSubmitEditing" | "textInputProps" | "labelText" | "errorText" | "focusColor" | "hoverColor" | "errorColor" | "disableColor" | "labelColor"> & {
    theme?: import("@emotion/react").Theme;
}>;
export {};
