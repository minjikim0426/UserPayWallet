import React, { useMemo } from 'react';
import styled from '@emotion/native';
const ContainerWrapper = styled.View `
  width: ${({ total }) => total * 30}px;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};
`;
const StarWrapper = styled.TouchableOpacity ``;
const StyledImage = styled.Image `
  width: 30px;
  height: 30px;
`;
function StarComponent({ customItem, onPress, isOn, disabled, }) {
    const handlePress = () => {
        onPress();
    };
    const star = React.useMemo(() => {
        if (customItem)
            return isOn ? customItem.onComponent : customItem.offComponent;
        else {
            const image = isOn
                ? require('./__assets__/star_s.png')
                : require('./__assets__/star_d.png');
            return <StyledImage source={image} resizeMode="contain"/>;
        }
    }, [customItem, isOn]);
    return (<StarWrapper onPress={handlePress} activeOpacity={disabled ? 1 : 0.7}>
      {star}
    </StarWrapper>);
}
function Rating(props) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const _handlePress = (position) => {
        props.onChange && props.onChange(position + 1);
    };
    const initArr = useMemo(() => {
        return new Array(props.total).fill(false);
    }, [props.total]);
    const starsArr = useMemo(() => {
        return initArr.map((item, index) => (<StarComponent key={index} isOn={props.value - 1 >= index} onPress={() => {
                props.onChange && !props.disabled && _handlePress(index);
            }} disabled={!props.onChange || props.disabled} customItem={props.customItem}/>));
    }, [
        initArr,
        props.value,
        props.onChange,
        props.disabled,
        props.customItem,
        _handlePress,
    ]);
    return (<ContainerWrapper style={props.containerStyle} total={props.total} disabled={props.disabled}>
      {starsArr}
    </ContainerWrapper>);
}
export { Rating };
