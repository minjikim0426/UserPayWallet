import { Animated, Easing, View } from 'react-native';
import React, { Fragment } from 'react';
import Arrow from './Arrow';
import styled from '@emotion/native';
const Container = styled.View `
  height: 40px;
`;
const SelectWrapper = styled.TouchableOpacity `
  position: relative;
  background-color: #ffffff;

  width: 100%;
  height: 100%;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: 14px 12px;
  border-radius: 5px;
  border: ${({ disabled }) => (disabled ? 'none' : '1px solid #CBD7E5')};
  border-radius: 6px;
`;
const SelectChildWrapper = styled.View `
  width: 100%;
  margin-top: 1px;
  overflow: hidden;
`;
const IconView = styled.View `
  width: 20px;
  height: 20px;
  justify-content: center;
  align-items: center;
`;
const StyledText = styled.Text `
  align-self: center;
  font-size: 12px;
  color: ${({ disabled }) => (disabled ? '#969696' : '#2b2b2b')};
`;
const Select = (props) => {
    const { testID, style, opened = false, disabled = false, showArrow = true, activeOpacity = 0.9, placeholder, onSelect, onOpen, prefixIcon, customIcon, renderSelectElement = () => null, selectedElementStyle, childrenElementStyle, textStyle, boxShadow = '0px 2px 4px rgba(212, 210, 212, 0.8)', children, } = props;
    const [value, setValue] = React.useState(props.value);
    const [labelValue, setLabelValue] = React.useState('');
    const [isOpen, setOpen] = React.useState(opened);
    const [childrenHeight, setChildrenHeight] = React.useState(40);
    const rotateAnimValue = React.useRef(new Animated.Value(0)).current;
    const slideAnimValue = React.useRef(new Animated.Value(0)).current;
    const handlePressItem = () => {
        setOpen(!isOpen);
    };
    const handleBlurItem = () => {
        setOpen(false);
    };
    React.useEffect(() => {
        const rotateValue = isOpen ? 1 : 0;
        Animated.timing(rotateAnimValue, {
            toValue: rotateValue,
            duration: 120,
            easing: Easing.linear,
            useNativeDriver: true,
        }).start();
        const slideValue = !disabled && isOpen ? 1 : 0;
        Animated.timing(slideAnimValue, {
            toValue: slideValue,
            duration: 120,
            easing: Easing.linear,
            useNativeDriver: false,
        }).start();
    }, [isOpen, disabled, rotateAnimValue, slideAnimValue]);
    React.useEffect(() => {
        onSelect(value);
    }, [onSelect, value]);
    React.useEffect(() => {
        if (onOpen)
            onOpen(isOpen);
    }, [isOpen, onOpen]);
    React.useEffect(() => {
        // This will set title of the first of child element to labelValue when the component mounted
        React.Children.forEach(children, (child, index) => {
            if (React.isValidElement(child) && index === 0)
                setLabelValue(child.props.children);
        });
    }, [children]);
    return (<Container testID={testID} style={style}>
      <SelectWrapper testID={'SELECT_WRAPPER'} activeOpacity={activeOpacity} disabled={disabled} style={selectedElementStyle} onPress={handlePressItem} onBlur={handleBlurItem}>
        <Fragment>
          {renderSelectElement() || (<Fragment>
              {prefixIcon && <IconView>{prefixIcon}</IconView>}
              {<StyledText disabled={disabled} style={textStyle}>
                  {placeholder || labelValue}
                </StyledText>}
            </Fragment>)}
          <Animated.View testID={'SELECT_SUFFIX'} style={[
            {
                transform: [
                    {
                        rotate: rotateAnimValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: ['0deg', '180deg'],
                        }),
                    },
                ],
            },
        ]}>
            <IconView>
              {customIcon || (showArrow && <Arrow customColor={textStyle}/>)}
            </IconView>
          </Animated.View>
        </Fragment>
      </SelectWrapper>
      <SelectChildWrapper visible={isOpen}>
        <Animated.ScrollView testID={'SELECT_CHILD_SCROLLVIEW'} keyboardDismissMode={'on-drag'} style={[
            {
                backgroundColor: '#ffffff',
                // @ts-ignore
                border: disabled ? 'none' : '1px solid #CBD7E5',
                borderRadius: 6,
                boxShadow,
                height: slideAnimValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [0, childrenHeight],
                }),
                ...childrenElementStyle,
            },
        ]}>
          <View onLayout={(e) => setChildrenHeight(e.nativeEvent.layout.height + 5)}>
            {React.Children.map(children, (child, index) => {
            const firstElementStyle = index === 0
                ? {}
                : { borderTopWidth: 1, borderTopColor: '#CBD7E5' };
            if (React.isValidElement(child))
                return React.cloneElement(child, {
                    onSelectItem: (itemVal) => {
                        setOpen(false);
                        setLabelValue(child.props.children);
                        setValue(itemVal);
                    },
                    style: firstElementStyle,
                    textStyle,
                });
            return null;
        })}
          </View>
        </Animated.ScrollView>
      </SelectChildWrapper>
    </Container>);
};
export default Select;
