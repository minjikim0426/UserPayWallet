import { Platform, Text, TextInput, View } from 'react-native';
import React, { useRef, useState } from 'react';
import { light, withTheme } from './theme';
import { useHover } from 'react-native-web-hooks';
const Component = ({ theme, testID, textInputProps, style, styles, labelText = '', errorText = '', value = '', placeholder, onChange, onChangeText, onFocus, onBlur, onSubmitEditing, autoCapitalize = 'none', secureTextEntry = false, editable = true, placeholderTextColor = theme.placeholder, focusColor = theme.primary, hoverColor = theme.primaryDark, errorColor = theme.negative, disableColor = theme.disabled, labelColor = theme.secondaryText, type = 'row', }) => {
    const [focused, setFocused] = useState(false);
    const ref = useRef(null);
    const hovered = useHover(ref);
    const borderColor = disableColor;
    const hoveredColor = theme.primary;
    const textColor = theme.text;
    const compositeStyles = type === 'row'
        ? {
            container: [
                {
                    alignSelf: 'stretch',
                    flexDirection: 'row',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    borderBottomWidth: 0.5,
                    borderBottomColor: borderColor,
                },
                styles?.container,
            ],
            hovered: [
                {
                    borderBottomColor: hoveredColor,
                    borderBottomWidth: 1,
                },
                styles?.hovered,
            ],
            labelText: [
                {
                    fontSize: 14,
                    color: labelColor,
                    width: 100,
                },
                styles?.labelText,
            ],
            labelTextHovered: [
                {
                    color: hoveredColor,
                },
                styles?.labelTextHovered,
            ],
            input: [
                {
                    paddingVertical: 12,
                    paddingHorizontal: 8,
                    fontSize: 14,
                    fontWeight: 'bold',
                    flex: 1,
                    color: textColor,
                },
                styles?.input,
            ],
            errorText: [
                {
                    marginTop: 4,
                    fontSize: 12,
                    color: errorColor,
                },
                styles?.errorText,
            ],
        }
        : {
            container: [
                {
                    alignSelf: 'stretch',
                    justifyContent: 'space-between',
                    borderBottomWidth: 0.5,
                    borderBottomColor: borderColor,
                    flexDirection: 'column',
                },
                styles?.container,
            ],
            hovered: [
                {
                    borderBottomWidth: 0.5,
                    borderBottomColor: hoveredColor,
                },
                styles?.hovered,
            ],
            labelText: [
                {
                    fontSize: 14,
                    color: labelColor,
                },
                styles?.labelText,
            ],
            labelTextHovered: [
                {
                    color: hoveredColor,
                },
                styles?.labelTextHovered,
            ],
            input: [
                {
                    paddingVertical: 12,
                    fontSize: 14,
                    fontWeight: 'bold',
                    color: textColor,
                },
                styles?.input,
            ],
            errorText: [
                {
                    marginTop: 8,
                    fontSize: 12,
                    color: errorColor,
                },
                styles?.errorText,
            ],
        };
    return (<View testID="container-id" ref={Platform.select({
            web: ref,
            default: undefined,
        })} style={[{ alignSelf: 'stretch', flexDirection: 'column' }, style]}>
      <View style={[
            compositeStyles.container,
            editable && hovered && [compositeStyles.hovered, styles?.hovered],
            {
                borderColor: hovered
                    ? hoverColor
                    : errorText
                        ? errorColor
                        : focused
                            ? focusColor
                            : disableColor,
                borderBottomColor: hovered
                    ? hoverColor
                    : errorText
                        ? errorColor
                        : focused
                            ? focusColor
                            : disableColor,
            },
        ]}>
        {labelText ? (<Text style={[
                compositeStyles.labelText,
                styles?.labelText,
                editable && hovered
                    ? [compositeStyles.labelTextHovered, styles?.labelTextHovered]
                    : {
                        color: errorText
                            ? errorColor
                            : focused
                                ? focusColor
                                : disableColor,
                    },
            ]}>
            {labelText}
          </Text>) : null}
        <TextInput {...textInputProps} testID={testID} autoCapitalize={autoCapitalize} secureTextEntry={secureTextEntry} style={[
            compositeStyles.input,
            styles?.input,
            // @ts-ignore
            Platform.OS === 'web' && { outlineWidth: 0 },
        ]} editable={editable} onFocus={(e) => {
            setFocused(true);
            onFocus?.(e);
        }} onBlur={(e) => {
            setFocused(false);
            onBlur?.(e);
        }} value={value} placeholder={placeholder} placeholderTextColor={placeholderTextColor} onChange={onChange} onChangeText={onChangeText} onSubmitEditing={onSubmitEditing}/>
      </View>
      {errorText ? (<Text style={[
                compositeStyles.errorText,
                styles?.errorText,
                { color: errorColor },
            ]}>
          {errorText}
        </Text>) : null}
    </View>);
};
Component.defaultProps = { theme: light };
export const EditText = withTheme(Component);
